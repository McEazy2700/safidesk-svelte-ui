// This file is auto-generated by @hey-api/openapi-ts

import type { Client, Options as Options2, TDataShape } from './client';
import { client } from './client.gen';
import type { AiAgentAgentChatCreateData, AiAgentAgentChatCreateResponses, AiAgentAgentResetCreateData, AiAgentAgentResetCreateResponses, AiAgentQueuesListData, AiAgentQueuesListResponses, AiAgentQueueStaffListData, AiAgentQueueStaffListResponses, AiAgentTicketsCreateCreateData, AiAgentTicketsCreateCreateResponses, CustomizedHelpdeskticketsAssignmentStatsListData, CustomizedHelpdeskticketsAssignmentStatsListErrors, CustomizedHelpdeskticketsAssignmentStatsListResponses, CustomizedHelpdeskticketsCreateData, CustomizedHelpdeskticketsCreateResponses, CustomizedHelpdeskticketsDeleteData, CustomizedHelpdeskticketsDeleteResponses, CustomizedHelpdeskticketsListData, CustomizedHelpdeskticketsListResponses, CustomizedHelpdeskticketsPartialUpdateData, CustomizedHelpdeskticketsPartialUpdateResponses, CustomizedHelpdeskticketsReadData, CustomizedHelpdeskticketsReadResponses, CustomizedHelpdeskticketsUpdateData, CustomizedHelpdeskticketsUpdateResponses, GroupsAddUserCreateData, GroupsAddUserCreateResponses, GroupsCreateData, GroupsCreateResponses, GroupsDeleteData, GroupsDeleteResponses, GroupsListData, GroupsListResponses, GroupsPartialUpdateData, GroupsPartialUpdateResponses, GroupsReadData, GroupsReadResponses, GroupsRemoveUserCreateData, GroupsRemoveUserCreateResponses, GroupsUpdateData, GroupsUpdateResponses, HelpdeskApiFollowupsAttachmentsCreateData, HelpdeskApiFollowupsAttachmentsCreateResponses, HelpdeskApiFollowupsAttachmentsDeleteData, HelpdeskApiFollowupsAttachmentsDeleteResponses, HelpdeskApiFollowupsAttachmentsListData, HelpdeskApiFollowupsAttachmentsListResponses, HelpdeskApiFollowupsAttachmentsPartialUpdateData, HelpdeskApiFollowupsAttachmentsPartialUpdateResponses, HelpdeskApiFollowupsAttachmentsReadData, HelpdeskApiFollowupsAttachmentsReadResponses, HelpdeskApiFollowupsAttachmentsUpdateData, HelpdeskApiFollowupsAttachmentsUpdateResponses, HelpdeskApiFollowupsCreateData, HelpdeskApiFollowupsCreateResponses, HelpdeskApiFollowupsDeleteData, HelpdeskApiFollowupsDeleteResponses, HelpdeskApiFollowupsListData, HelpdeskApiFollowupsListResponses, HelpdeskApiFollowupsPartialUpdateData, HelpdeskApiFollowupsPartialUpdateResponses, HelpdeskApiFollowupsReadData, HelpdeskApiFollowupsReadResponses, HelpdeskApiFollowupsUpdateData, HelpdeskApiFollowupsUpdateResponses, HelpdeskApiTicketsCreateData, HelpdeskApiTicketsCreateResponses, HelpdeskApiTicketsDeleteData, HelpdeskApiTicketsDeleteResponses, HelpdeskApiTicketsListData, HelpdeskApiTicketsListResponses, HelpdeskApiTicketsPartialUpdateData, HelpdeskApiTicketsPartialUpdateResponses, HelpdeskApiTicketsReadData, HelpdeskApiTicketsReadResponses, HelpdeskApiTicketsUpdateData, HelpdeskApiTicketsUpdateResponses, HelpdeskApiUsersCreateData, HelpdeskApiUsersCreateResponses, HelpdeskApiUserTicketsListData, HelpdeskApiUserTicketsListResponses, HelpdeskApiUserTicketsReadData, HelpdeskApiUserTicketsReadResponses, HelpdeskDatatablesTicketListReadData, HelpdeskDatatablesTicketListReadResponses, HelpdeskTimelineTicketListReadData, HelpdeskTimelineTicketListReadResponses, LoginCreateData, LoginCreateResponses, QueueCreateData, QueueCreateResponses, QueueDeleteData, QueueDeleteResponses, QueueGroupLinksCreateData, QueueGroupLinksCreateResponses, QueueGroupLinksDeleteData, QueueGroupLinksDeleteResponses, QueueGroupLinksListData, QueueGroupLinksListResponses, QueueGroupLinksPartialUpdateData, QueueGroupLinksPartialUpdateResponses, QueueGroupLinksReadData, QueueGroupLinksReadResponses, QueueGroupLinksUpdateData, QueueGroupLinksUpdateResponses, QueueListData, QueueListResponses, QueuePartialUpdateData, QueuePartialUpdateResponses, QueueReadData, QueueReadResponses, QueueUpdateData, QueueUpdateResponses, RefreshCreateData, RefreshCreateResponses, UserGetListData, UserGetListResponses, UsersCreateData, UsersCreateResponses, UsersDeleteData, UsersDeleteResponses, UsersListData, UsersListResponses, UsersPartialUpdateData, UsersPartialUpdateResponses, UsersReadData, UsersReadResponses, UsersUpdateData, UsersUpdateResponses } from './types.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = Options2<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

export const aiAgentAgentChatCreate = <ThrowOnError extends boolean = false>(options?: Options<AiAgentAgentChatCreateData, ThrowOnError>) => {
    return (options?.client ?? client).post<AiAgentAgentChatCreateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/ai-agent/agent/chat/',
        ...options
    });
};

export const aiAgentAgentResetCreate = <ThrowOnError extends boolean = false>(options?: Options<AiAgentAgentResetCreateData, ThrowOnError>) => {
    return (options?.client ?? client).post<AiAgentAgentResetCreateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/ai-agent/agent/reset/',
        ...options
    });
};

export const aiAgentQueueStaffList = <ThrowOnError extends boolean = false>(options: Options<AiAgentQueueStaffListData, ThrowOnError>) => {
    return (options.client ?? client).get<AiAgentQueueStaffListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/ai-agent/queue/{queue_id}/staff/',
        ...options
    });
};

export const aiAgentQueuesList = <ThrowOnError extends boolean = false>(options?: Options<AiAgentQueuesListData, ThrowOnError>) => {
    return (options?.client ?? client).get<AiAgentQueuesListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/ai-agent/queues/',
        ...options
    });
};

export const aiAgentTicketsCreateCreate = <ThrowOnError extends boolean = false>(options?: Options<AiAgentTicketsCreateCreateData, ThrowOnError>) => {
    return (options?.client ?? client).post<AiAgentTicketsCreateCreateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/ai-agent/tickets/create/',
        ...options
    });
};

/**
 * List tickets; optional filters: status, priority, queue, user_id.
 */
export const customizedHelpdeskticketsList = <ThrowOnError extends boolean = false>(options?: Options<CustomizedHelpdeskticketsListData, ThrowOnError>) => {
    return (options?.client ?? client).get<CustomizedHelpdeskticketsListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/customized_helpdesktickets/',
        ...options
    });
};

/**
 * Customized TicketViewSet that accepts `user_id` (looks up the user's email
 * and filters Ticket.submitter_email by that email). Only staff or the user
 * themselves can query by a different user_id.
 */
export const customizedHelpdeskticketsCreate = <ThrowOnError extends boolean = false>(options: Options<CustomizedHelpdeskticketsCreateData, ThrowOnError>) => {
    return (options.client ?? client).post<CustomizedHelpdeskticketsCreateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/customized_helpdesktickets/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get Ticket Assignment Statistics
 * Returns the total number of tickets currently assigned to a staff member and those that are unassigned. Useful for dashboard metrics and workload monitoring.
 */
export const customizedHelpdeskticketsAssignmentStatsList = <ThrowOnError extends boolean = false>(options?: Options<CustomizedHelpdeskticketsAssignmentStatsListData, ThrowOnError>) => {
    return (options?.client ?? client).get<CustomizedHelpdeskticketsAssignmentStatsListResponses, CustomizedHelpdeskticketsAssignmentStatsListErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/customized_helpdesktickets/assignment-stats/',
        ...options
    });
};

/**
 * Customized TicketViewSet that accepts `user_id` (looks up the user's email
 * and filters Ticket.submitter_email by that email). Only staff or the user
 * themselves can query by a different user_id.
 */
export const customizedHelpdeskticketsDelete = <ThrowOnError extends boolean = false>(options: Options<CustomizedHelpdeskticketsDeleteData, ThrowOnError>) => {
    return (options.client ?? client).delete<CustomizedHelpdeskticketsDeleteResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/customized_helpdesktickets/{id}/',
        ...options
    });
};

/**
 * Customized TicketViewSet that accepts `user_id` (looks up the user's email
 * and filters Ticket.submitter_email by that email). Only staff or the user
 * themselves can query by a different user_id.
 */
export const customizedHelpdeskticketsRead = <ThrowOnError extends boolean = false>(options: Options<CustomizedHelpdeskticketsReadData, ThrowOnError>) => {
    return (options.client ?? client).get<CustomizedHelpdeskticketsReadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/customized_helpdesktickets/{id}/',
        ...options
    });
};

/**
 * Customized TicketViewSet that accepts `user_id` (looks up the user's email
 * and filters Ticket.submitter_email by that email). Only staff or the user
 * themselves can query by a different user_id.
 */
export const customizedHelpdeskticketsPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<CustomizedHelpdeskticketsPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? client).patch<CustomizedHelpdeskticketsPartialUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/customized_helpdesktickets/{id}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Customized TicketViewSet that accepts `user_id` (looks up the user's email
 * and filters Ticket.submitter_email by that email). Only staff or the user
 * themselves can query by a different user_id.
 */
export const customizedHelpdeskticketsUpdate = <ThrowOnError extends boolean = false>(options: Options<CustomizedHelpdeskticketsUpdateData, ThrowOnError>) => {
    return (options.client ?? client).put<CustomizedHelpdeskticketsUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/customized_helpdesktickets/{id}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List all groups
 */
export const groupsList = <ThrowOnError extends boolean = false>(options?: Options<GroupsListData, ThrowOnError>) => {
    return (options?.client ?? client).get<GroupsListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/groups/',
        ...options
    });
};

/**
 * Create a new group
 */
export const groupsCreate = <ThrowOnError extends boolean = false>(options: Options<GroupsCreateData, ThrowOnError>) => {
    return (options.client ?? client).post<GroupsCreateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/groups/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete a group
 */
export const groupsDelete = <ThrowOnError extends boolean = false>(options: Options<GroupsDeleteData, ThrowOnError>) => {
    return (options.client ?? client).delete<GroupsDeleteResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/groups/{id}/',
        ...options
    });
};

/**
 * Get group details with members
 */
export const groupsRead = <ThrowOnError extends boolean = false>(options: Options<GroupsReadData, ThrowOnError>) => {
    return (options.client ?? client).get<GroupsReadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/groups/{id}/',
        ...options
    });
};

/**
 * Partially update group details
 */
export const groupsPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<GroupsPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? client).patch<GroupsPartialUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/groups/{id}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Update group details
 */
export const groupsUpdate = <ThrowOnError extends boolean = false>(options: Options<GroupsUpdateData, ThrowOnError>) => {
    return (options.client ?? client).put<GroupsUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/groups/{id}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Add user to a group
 */
export const groupsAddUserCreate = <ThrowOnError extends boolean = false>(options: Options<GroupsAddUserCreateData, ThrowOnError>) => {
    return (options.client ?? client).post<GroupsAddUserCreateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/groups/{id}/add_user/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Remove user from a group
 */
export const groupsRemoveUserCreate = <ThrowOnError extends boolean = false>(options: Options<GroupsRemoveUserCreateData, ThrowOnError>) => {
    return (options.client ?? client).post<GroupsRemoveUserCreateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/groups/{id}/remove_user/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const helpdeskApiFollowupsAttachmentsList = <ThrowOnError extends boolean = false>(options?: Options<HelpdeskApiFollowupsAttachmentsListData, ThrowOnError>) => {
    return (options?.client ?? client).get<HelpdeskApiFollowupsAttachmentsListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/helpdesk/api/followups-attachments/',
        ...options
    });
};

export const helpdeskApiFollowupsAttachmentsCreate = <ThrowOnError extends boolean = false>(options: Options<HelpdeskApiFollowupsAttachmentsCreateData, ThrowOnError>) => {
    return (options.client ?? client).post<HelpdeskApiFollowupsAttachmentsCreateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/helpdesk/api/followups-attachments/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const helpdeskApiFollowupsAttachmentsDelete = <ThrowOnError extends boolean = false>(options: Options<HelpdeskApiFollowupsAttachmentsDeleteData, ThrowOnError>) => {
    return (options.client ?? client).delete<HelpdeskApiFollowupsAttachmentsDeleteResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/helpdesk/api/followups-attachments/{id}/',
        ...options
    });
};

export const helpdeskApiFollowupsAttachmentsRead = <ThrowOnError extends boolean = false>(options: Options<HelpdeskApiFollowupsAttachmentsReadData, ThrowOnError>) => {
    return (options.client ?? client).get<HelpdeskApiFollowupsAttachmentsReadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/helpdesk/api/followups-attachments/{id}/',
        ...options
    });
};

export const helpdeskApiFollowupsAttachmentsPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<HelpdeskApiFollowupsAttachmentsPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? client).patch<HelpdeskApiFollowupsAttachmentsPartialUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/helpdesk/api/followups-attachments/{id}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const helpdeskApiFollowupsAttachmentsUpdate = <ThrowOnError extends boolean = false>(options: Options<HelpdeskApiFollowupsAttachmentsUpdateData, ThrowOnError>) => {
    return (options.client ?? client).put<HelpdeskApiFollowupsAttachmentsUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/helpdesk/api/followups-attachments/{id}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const helpdeskApiFollowupsList = <ThrowOnError extends boolean = false>(options?: Options<HelpdeskApiFollowupsListData, ThrowOnError>) => {
    return (options?.client ?? client).get<HelpdeskApiFollowupsListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/helpdesk/api/followups/',
        ...options
    });
};

export const helpdeskApiFollowupsCreate = <ThrowOnError extends boolean = false>(options: Options<HelpdeskApiFollowupsCreateData, ThrowOnError>) => {
    return (options.client ?? client).post<HelpdeskApiFollowupsCreateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/helpdesk/api/followups/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const helpdeskApiFollowupsDelete = <ThrowOnError extends boolean = false>(options: Options<HelpdeskApiFollowupsDeleteData, ThrowOnError>) => {
    return (options.client ?? client).delete<HelpdeskApiFollowupsDeleteResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/helpdesk/api/followups/{id}/',
        ...options
    });
};

export const helpdeskApiFollowupsRead = <ThrowOnError extends boolean = false>(options: Options<HelpdeskApiFollowupsReadData, ThrowOnError>) => {
    return (options.client ?? client).get<HelpdeskApiFollowupsReadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/helpdesk/api/followups/{id}/',
        ...options
    });
};

export const helpdeskApiFollowupsPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<HelpdeskApiFollowupsPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? client).patch<HelpdeskApiFollowupsPartialUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/helpdesk/api/followups/{id}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const helpdeskApiFollowupsUpdate = <ThrowOnError extends boolean = false>(options: Options<HelpdeskApiFollowupsUpdateData, ThrowOnError>) => {
    return (options.client ?? client).put<HelpdeskApiFollowupsUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/helpdesk/api/followups/{id}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * A viewset that provides the standard actions to handle Ticket
 * You can filter the tickets by status using the `status` query parameter. For example:
 *
 * `/api/tickets/?status=Open,Resolved` will return all the tickets that are Open or Resolved.
 */
export const helpdeskApiTicketsList = <ThrowOnError extends boolean = false>(options?: Options<HelpdeskApiTicketsListData, ThrowOnError>) => {
    return (options?.client ?? client).get<HelpdeskApiTicketsListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/helpdesk/api/tickets/',
        ...options
    });
};

/**
 * A viewset that provides the standard actions to handle Ticket
 * You can filter the tickets by status using the `status` query parameter. For example:
 *
 * `/api/tickets/?status=Open,Resolved` will return all the tickets that are Open or Resolved.
 */
export const helpdeskApiTicketsCreate = <ThrowOnError extends boolean = false>(options: Options<HelpdeskApiTicketsCreateData, ThrowOnError>) => {
    return (options.client ?? client).post<HelpdeskApiTicketsCreateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/helpdesk/api/tickets/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * A viewset that provides the standard actions to handle Ticket
 * You can filter the tickets by status using the `status` query parameter. For example:
 *
 * `/api/tickets/?status=Open,Resolved` will return all the tickets that are Open or Resolved.
 */
export const helpdeskApiTicketsDelete = <ThrowOnError extends boolean = false>(options: Options<HelpdeskApiTicketsDeleteData, ThrowOnError>) => {
    return (options.client ?? client).delete<HelpdeskApiTicketsDeleteResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/helpdesk/api/tickets/{id}/',
        ...options
    });
};

/**
 * A viewset that provides the standard actions to handle Ticket
 * You can filter the tickets by status using the `status` query parameter. For example:
 *
 * `/api/tickets/?status=Open,Resolved` will return all the tickets that are Open or Resolved.
 */
export const helpdeskApiTicketsRead = <ThrowOnError extends boolean = false>(options: Options<HelpdeskApiTicketsReadData, ThrowOnError>) => {
    return (options.client ?? client).get<HelpdeskApiTicketsReadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/helpdesk/api/tickets/{id}/',
        ...options
    });
};

/**
 * A viewset that provides the standard actions to handle Ticket
 * You can filter the tickets by status using the `status` query parameter. For example:
 *
 * `/api/tickets/?status=Open,Resolved` will return all the tickets that are Open or Resolved.
 */
export const helpdeskApiTicketsPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<HelpdeskApiTicketsPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? client).patch<HelpdeskApiTicketsPartialUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/helpdesk/api/tickets/{id}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * A viewset that provides the standard actions to handle Ticket
 * You can filter the tickets by status using the `status` query parameter. For example:
 *
 * `/api/tickets/?status=Open,Resolved` will return all the tickets that are Open or Resolved.
 */
export const helpdeskApiTicketsUpdate = <ThrowOnError extends boolean = false>(options: Options<HelpdeskApiTicketsUpdateData, ThrowOnError>) => {
    return (options.client ?? client).put<HelpdeskApiTicketsUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/helpdesk/api/tickets/{id}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * A list of all the tickets submitted by the current user
 * The view is paginated by default
 */
export const helpdeskApiUserTicketsList = <ThrowOnError extends boolean = false>(options?: Options<HelpdeskApiUserTicketsListData, ThrowOnError>) => {
    return (options?.client ?? client).get<HelpdeskApiUserTicketsListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/helpdesk/api/user_tickets/',
        ...options
    });
};

/**
 * A list of all the tickets submitted by the current user
 * The view is paginated by default
 */
export const helpdeskApiUserTicketsRead = <ThrowOnError extends boolean = false>(options: Options<HelpdeskApiUserTicketsReadData, ThrowOnError>) => {
    return (options.client ?? client).get<HelpdeskApiUserTicketsReadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/helpdesk/api/user_tickets/{id}/',
        ...options
    });
};

export const helpdeskApiUsersCreate = <ThrowOnError extends boolean = false>(options: Options<HelpdeskApiUsersCreateData, ThrowOnError>) => {
    return (options.client ?? client).post<HelpdeskApiUsersCreateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/helpdesk/api/users/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Datatable on ticket_list.html uses this view from to get objects to display
 * on the table. query_tickets_by_args is at lib.py, DatatablesTicketSerializer is in
 * serializers.py. The serializers and this view use django-rest_framework methods
 */
export const helpdeskDatatablesTicketListRead = <ThrowOnError extends boolean = false>(options: Options<HelpdeskDatatablesTicketListReadData, ThrowOnError>) => {
    return (options.client ?? client).get<HelpdeskDatatablesTicketListReadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/helpdesk/datatables_ticket_list/{query}',
        ...options
    });
};

export const helpdeskTimelineTicketListRead = <ThrowOnError extends boolean = false>(options: Options<HelpdeskTimelineTicketListReadData, ThrowOnError>) => {
    return (options.client ?? client).get<HelpdeskTimelineTicketListReadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/helpdesk/timeline_ticket_list/{query}',
        ...options
    });
};

/**
 * Login to get JWT access and refresh tokens
 */
export const loginCreate = <ThrowOnError extends boolean = false>(options: Options<LoginCreateData, ThrowOnError>) => {
    return (options.client ?? client).post<LoginCreateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/login/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Retrieve all queue-group links.
 */
export const queueGroupLinksList = <ThrowOnError extends boolean = false>(options?: Options<QueueGroupLinksListData, ThrowOnError>) => {
    return (options?.client ?? client).get<QueueGroupLinksListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/queue-group-links/',
        ...options
    });
};

/**
 * Assign a group to a queue.
 */
export const queueGroupLinksCreate = <ThrowOnError extends boolean = false>(options: Options<QueueGroupLinksCreateData, ThrowOnError>) => {
    return (options.client ?? client).post<QueueGroupLinksCreateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/queue-group-links/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Remove the link between a queue and its group.
 */
export const queueGroupLinksDelete = <ThrowOnError extends boolean = false>(options: Options<QueueGroupLinksDeleteData, ThrowOnError>) => {
    return (options.client ?? client).delete<QueueGroupLinksDeleteResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/queue-group-links/{queue_id}/',
        ...options
    });
};

/**
 * Get the group responsible for a queue.
 */
export const queueGroupLinksRead = <ThrowOnError extends boolean = false>(options: Options<QueueGroupLinksReadData, ThrowOnError>) => {
    return (options.client ?? client).get<QueueGroupLinksReadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/queue-group-links/{queue_id}/',
        ...options
    });
};

/**
 * Partially update the group assigned to a queue.
 */
export const queueGroupLinksPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<QueueGroupLinksPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? client).patch<QueueGroupLinksPartialUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/queue-group-links/{queue_id}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Update/change the group assigned to a queue.
 */
export const queueGroupLinksUpdate = <ThrowOnError extends boolean = false>(options: Options<QueueGroupLinksUpdateData, ThrowOnError>) => {
    return (options.client ?? client).put<QueueGroupLinksUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/queue-group-links/{queue_id}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Retrieve all queue-group links.
 */
export const queueList = <ThrowOnError extends boolean = false>(options?: Options<QueueListData, ThrowOnError>) => {
    return (options?.client ?? client).get<QueueListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/queue/',
        ...options
    });
};

/**
 * Assign a group to a queue.
 */
export const queueCreate = <ThrowOnError extends boolean = false>(options: Options<QueueCreateData, ThrowOnError>) => {
    return (options.client ?? client).post<QueueCreateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/queue/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Remove the link between a queue and its group.
 */
export const queueDelete = <ThrowOnError extends boolean = false>(options: Options<QueueDeleteData, ThrowOnError>) => {
    return (options.client ?? client).delete<QueueDeleteResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/queue/{queue_id}/',
        ...options
    });
};

/**
 * Get the group responsible for a queue.
 */
export const queueRead = <ThrowOnError extends boolean = false>(options: Options<QueueReadData, ThrowOnError>) => {
    return (options.client ?? client).get<QueueReadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/queue/{queue_id}/',
        ...options
    });
};

/**
 * Partially update the group assigned to a queue.
 */
export const queuePartialUpdate = <ThrowOnError extends boolean = false>(options: Options<QueuePartialUpdateData, ThrowOnError>) => {
    return (options.client ?? client).patch<QueuePartialUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/queue/{queue_id}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Update/change the group assigned to a queue.
 */
export const queueUpdate = <ThrowOnError extends boolean = false>(options: Options<QueueUpdateData, ThrowOnError>) => {
    return (options.client ?? client).put<QueueUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/queue/{queue_id}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Refresh JWT access token
 */
export const refreshCreate = <ThrowOnError extends boolean = false>(options: Options<RefreshCreateData, ThrowOnError>) => {
    return (options.client ?? client).post<RefreshCreateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/refresh/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Retrieve the currently authenticated user, along with
 * their group(s) and linked helpdesk queue(s).
 */
export const userGetList = <ThrowOnError extends boolean = false>(options?: Options<UserGetListData, ThrowOnError>) => {
    return (options?.client ?? client).get<UserGetListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/user/get/',
        ...options
    });
};

export const usersList = <ThrowOnError extends boolean = false>(options?: Options<UsersListData, ThrowOnError>) => {
    return (options?.client ?? client).get<UsersListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/users/',
        ...options
    });
};

export const usersCreate = <ThrowOnError extends boolean = false>(options: Options<UsersCreateData, ThrowOnError>) => {
    return (options.client ?? client).post<UsersCreateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/users/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const usersDelete = <ThrowOnError extends boolean = false>(options: Options<UsersDeleteData, ThrowOnError>) => {
    return (options.client ?? client).delete<UsersDeleteResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/users/{id}/',
        ...options
    });
};

export const usersRead = <ThrowOnError extends boolean = false>(options: Options<UsersReadData, ThrowOnError>) => {
    return (options.client ?? client).get<UsersReadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/users/{id}/',
        ...options
    });
};

export const usersPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<UsersPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? client).patch<UsersPartialUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/users/{id}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const usersUpdate = <ThrowOnError extends boolean = false>(options: Options<UsersUpdateData, ThrowOnError>) => {
    return (options.client ?? client).put<UsersUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/users/{id}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};
