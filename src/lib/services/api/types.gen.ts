// This file is auto-generated by @hey-api/openapi-ts

export type ClientOptions = {
    baseUrl: 'http://itmsmvp-production.up.railway.app/' | (string & {});
};

export type CustomQueue = {
    /**
     * ID
     */
    readonly id?: number;
    /**
     * Title
     */
    title: string;
    /**
     * Slug
     * This slug is used when building ticket ID's. Once set, try not to change it or e-mailing may get messy.
     */
    slug: string;
    /**
     * E-Mail Address
     * All outgoing e-mails for this queue will use this e-mail address. If you use IMAP or POP3, this should be the e-mail address for that mailbox.
     */
    email_address?: string | null;
};

export type HelpdeskUser = {
    /**
     * ID
     */
    readonly id?: number;
    /**
     * Username
     * Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.
     */
    username: string;
    /**
     * Email address
     */
    email?: string;
};

export type FollowUpAttachment = {
    /**
     * ID
     */
    readonly id?: number;
    /**
     * Follow-up
     */
    followup: number;
    /**
     * File
     */
    readonly file?: string;
    /**
     * Filename
     */
    filename?: string;
    /**
     * MIME Type
     */
    mime_type?: string;
    /**
     * Size
     * Size of this file in bytes
     */
    size?: number;
};

export type FollowUp = {
    /**
     * ID
     */
    readonly id?: number;
    /**
     * Ticket
     */
    ticket: number;
    /**
     * User
     */
    user?: number | null;
    /**
     * Title
     */
    title?: string | null;
    /**
     * Comment
     */
    comment?: string | null;
    /**
     * Public
     * Public tickets are viewable by the submitter and all staff, but non-public tickets can only be seen by staff.
     */
    public?: boolean;
    /**
     * New Status
     * If the status was changed, what was it changed to?
     */
    new_status?: 1 | 2 | 3 | 4 | 5;
    /**
     * Time spent
     * Time spent on this follow up
     */
    time_spent?: string | null;
    attachments?: Array<string>;
    readonly followupattachment_set?: Array<FollowUpAttachment>;
    /**
     * Date
     */
    readonly date?: string;
    /**
     * E-Mail ID
     * The Message ID of the submitter's email.
     */
    readonly message_id?: string | null;
};

export type CustomTicket = {
    /**
     * ID
     */
    readonly id?: number;
    queue?: CustomQueue;
    /**
     * Title
     */
    title: string;
    /**
     * Description
     * The content of the customers query.
     */
    description?: string | null;
    /**
     * Resolution
     * The resolution provided to the customer by our staff.
     */
    resolution?: string | null;
    /**
     * Submitter E-Mail
     * The submitter will receive an email for all public follow-ups left for this task.
     */
    submitter_email?: string | null;
    assigned_to?: HelpdeskUser;
    /**
     * Status
     */
    status?: 1 | 2 | 3 | 4 | 5;
    /**
     * On Hold
     * If a ticket is on hold, it will not automatically be escalated.
     */
    on_hold?: boolean;
    /**
     * Priority
     * 1 = Highest Priority, 5 = Low Priority
     */
    priority?: 1 | 2 | 3 | 4 | 5;
    /**
     * Due on
     */
    due_date?: string | null;
    /**
     * Merged to
     */
    merged_to?: number | null;
    /**
     * Attachment
     */
    readonly attachment?: string;
    readonly followup_set?: Array<FollowUp>;
    /**
     * Queue id
     */
    queue_id: number;
    /**
     * Assigned to id
     */
    assigned_to_id?: number;
};

export type Group = {
    /**
     * ID
     */
    readonly id?: number;
    /**
     * Name
     */
    name: string;
};

export type GroupDetail = {
    /**
     * ID
     */
    readonly id?: number;
    /**
     * Name
     */
    name: string;
    /**
     * Members
     */
    readonly members?: string;
};

export type Ticket = {
    /**
     * ID
     */
    readonly id?: number;
    /**
     * Queue
     */
    queue: number;
    /**
     * Title
     */
    title: string;
    /**
     * Description
     * The content of the customers query.
     */
    description?: string | null;
    /**
     * Resolution
     * The resolution provided to the customer by our staff.
     */
    resolution?: string | null;
    /**
     * Submitter E-Mail
     * The submitter will receive an email for all public follow-ups left for this task.
     */
    submitter_email?: string | null;
    /**
     * Assigned to
     */
    assigned_to?: number | null;
    /**
     * Status
     */
    status?: 1 | 2 | 3 | 4 | 5;
    /**
     * On Hold
     * If a ticket is on hold, it will not automatically be escalated.
     */
    on_hold?: boolean;
    /**
     * Priority
     * 1 = Highest Priority, 5 = Low Priority
     */
    priority?: 1 | 2 | 3 | 4 | 5;
    /**
     * Due on
     */
    due_date?: string | null;
    /**
     * Merged to
     */
    merged_to?: number | null;
    /**
     * Attachment
     */
    readonly attachment?: string;
    readonly followup_set?: Array<FollowUp>;
};

export type PublicTicketListing = {
    /**
     * Ticket
     */
    readonly ticket?: string;
    /**
     * ID
     */
    readonly id?: number;
    /**
     * Title
     */
    title: string;
    /**
     * Queue
     */
    readonly queue?: string;
    /**
     * Status
     */
    readonly status?: string;
    /**
     * Created
     */
    readonly created?: string;
    /**
     * Due date
     */
    readonly due_date?: string;
    /**
     * Submitter
     */
    readonly submitter?: string;
    /**
     * Kbitem
     */
    readonly kbitem?: string;
    /**
     * Secret key
     */
    readonly secret_key?: string;
};

export type User = {
    /**
     * First name
     */
    first_name?: string;
    /**
     * Last name
     */
    last_name?: string;
    /**
     * Username
     * Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.
     */
    username: string;
    /**
     * Email address
     */
    email?: string;
    /**
     * Password
     */
    password: string;
};

export type QueueGroupLink = {
    /**
     * Queue
     */
    queue: number;
    /**
     * Queue name
     */
    readonly queue_name?: string;
    /**
     * Group
     */
    group: number;
    /**
     * Group name
     */
    readonly group_name?: string;
};

export type Queue = {
    /**
     * ID
     */
    readonly id?: number;
    /**
     * Title
     */
    title: string;
    /**
     * Slug
     * This slug is used when building ticket ID's. Once set, try not to change it or e-mailing may get messy.
     */
    slug: string;
};

export type AppUser = {
    /**
     * ID
     */
    readonly id?: number;
    /**
     * Username
     * Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.
     */
    username: string;
    /**
     * Email address
     */
    email?: string;
    /**
     * First name
     */
    first_name?: string;
    /**
     * Last name
     */
    last_name?: string;
    /**
     * Active
     * Designates whether this user should be treated as active. Unselect this instead of deleting accounts.
     */
    is_active?: boolean;
    /**
     * Staff status
     * Designates whether the user can log into this admin site.
     */
    is_staff?: boolean;
    /**
     * Date joined
     */
    readonly date_joined?: string;
    /**
     * Password
     */
    password?: string;
};

export type CustomQueueWritable = {
    /**
     * Title
     */
    title: string;
    /**
     * Slug
     * This slug is used when building ticket ID's. Once set, try not to change it or e-mailing may get messy.
     */
    slug: string;
    /**
     * E-Mail Address
     * All outgoing e-mails for this queue will use this e-mail address. If you use IMAP or POP3, this should be the e-mail address for that mailbox.
     */
    email_address?: string | null;
};

export type HelpdeskUserWritable = {
    /**
     * Username
     * Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.
     */
    username: string;
    /**
     * Email address
     */
    email?: string;
};

export type FollowUpAttachmentWritable = {
    /**
     * Follow-up
     */
    followup: number;
    /**
     * Filename
     */
    filename?: string;
    /**
     * MIME Type
     */
    mime_type?: string;
    /**
     * Size
     * Size of this file in bytes
     */
    size?: number;
};

export type FollowUpWritable = {
    /**
     * Ticket
     */
    ticket: number;
    /**
     * User
     */
    user?: number | null;
    /**
     * Title
     */
    title?: string | null;
    /**
     * Comment
     */
    comment?: string | null;
    /**
     * Public
     * Public tickets are viewable by the submitter and all staff, but non-public tickets can only be seen by staff.
     */
    public?: boolean;
    /**
     * New Status
     * If the status was changed, what was it changed to?
     */
    new_status?: 1 | 2 | 3 | 4 | 5;
    /**
     * Time spent
     * Time spent on this follow up
     */
    time_spent?: string | null;
    attachments?: Array<unknown>;
};

export type CustomTicketWritable = {
    queue?: CustomQueueWritable;
    /**
     * Title
     */
    title: string;
    /**
     * Description
     * The content of the customers query.
     */
    description?: string | null;
    /**
     * Resolution
     * The resolution provided to the customer by our staff.
     */
    resolution?: string | null;
    /**
     * Submitter E-Mail
     * The submitter will receive an email for all public follow-ups left for this task.
     */
    submitter_email?: string | null;
    assigned_to?: HelpdeskUserWritable;
    /**
     * Status
     */
    status?: 1 | 2 | 3 | 4 | 5;
    /**
     * On Hold
     * If a ticket is on hold, it will not automatically be escalated.
     */
    on_hold?: boolean;
    /**
     * Priority
     * 1 = Highest Priority, 5 = Low Priority
     */
    priority?: 1 | 2 | 3 | 4 | 5;
    /**
     * Due on
     */
    due_date?: string | null;
    /**
     * Merged to
     */
    merged_to?: number | null;
    /**
     * Queue id
     */
    queue_id: number;
    /**
     * Assigned to id
     */
    assigned_to_id?: number;
};

export type GroupWritable = {
    /**
     * Name
     */
    name: string;
};

export type GroupDetailWritable = {
    /**
     * Name
     */
    name: string;
};

export type TicketWritable = {
    /**
     * Queue
     */
    queue: number;
    /**
     * Title
     */
    title: string;
    /**
     * Description
     * The content of the customers query.
     */
    description?: string | null;
    /**
     * Resolution
     * The resolution provided to the customer by our staff.
     */
    resolution?: string | null;
    /**
     * Submitter E-Mail
     * The submitter will receive an email for all public follow-ups left for this task.
     */
    submitter_email?: string | null;
    /**
     * Assigned to
     */
    assigned_to?: number | null;
    /**
     * Status
     */
    status?: 1 | 2 | 3 | 4 | 5;
    /**
     * On Hold
     * If a ticket is on hold, it will not automatically be escalated.
     */
    on_hold?: boolean;
    /**
     * Priority
     * 1 = Highest Priority, 5 = Low Priority
     */
    priority?: 1 | 2 | 3 | 4 | 5;
    /**
     * Due on
     */
    due_date?: string | null;
    /**
     * Merged to
     */
    merged_to?: number | null;
};

export type PublicTicketListingWritable = {
    /**
     * Title
     */
    title: string;
};

export type QueueGroupLinkWritable = {
    /**
     * Queue
     */
    queue: number;
    /**
     * Group
     */
    group: number;
};

export type QueueWritable = {
    /**
     * Title
     */
    title: string;
    /**
     * Slug
     * This slug is used when building ticket ID's. Once set, try not to change it or e-mailing may get messy.
     */
    slug: string;
};

export type AppUserWritable = {
    /**
     * Username
     * Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.
     */
    username: string;
    /**
     * Email address
     */
    email?: string;
    /**
     * First name
     */
    first_name?: string;
    /**
     * Last name
     */
    last_name?: string;
    /**
     * Active
     * Designates whether this user should be treated as active. Unselect this instead of deleting accounts.
     */
    is_active?: boolean;
    /**
     * Staff status
     * Designates whether the user can log into this admin site.
     */
    is_staff?: boolean;
    /**
     * Password
     */
    password?: string;
};

export type AiAgentAgentChatCreateData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/ai-agent/agent/chat/';
};

export type AiAgentAgentChatCreateResponses = {
    201: unknown;
};

export type AiAgentAgentResetCreateData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/ai-agent/agent/reset/';
};

export type AiAgentAgentResetCreateResponses = {
    201: unknown;
};

export type AiAgentQueueStaffListData = {
    body?: never;
    path: {
        queue_id: string;
    };
    query?: never;
    url: '/ai-agent/queue/{queue_id}/staff/';
};

export type AiAgentQueueStaffListResponses = {
    200: unknown;
};

export type AiAgentQueuesListData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/ai-agent/queues/';
};

export type AiAgentQueuesListResponses = {
    200: unknown;
};

export type AiAgentTicketsCreateCreateData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/ai-agent/tickets/create/';
};

export type AiAgentTicketsCreateCreateResponses = {
    201: unknown;
};

export type CustomizedHelpdeskticketsListData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * A page number within the paginated result set.
         */
        page?: number;
        /**
         * Number of results to return per page.
         */
        page_size?: number;
        /**
         * Filter by status (name or id).
         */
        status?: string;
        /**
         * Filter by priority (name or id).
         */
        priority?: string;
        /**
         * Filter by queue ID.
         */
        queue?: number;
        /**
         * Filter tickets by creator's user ID. Only staff or the same user may use this parameter.
         */
        user_id?: number;
    };
    url: '/customized_helpdesktickets/';
};

export type CustomizedHelpdeskticketsListResponses = {
    200: {
        count: number;
        next?: string | null;
        previous?: string | null;
        results: Array<CustomTicket>;
    };
};

export type CustomizedHelpdeskticketsListResponse = CustomizedHelpdeskticketsListResponses[keyof CustomizedHelpdeskticketsListResponses];

export type CustomizedHelpdeskticketsCreateData = {
    body: CustomTicketWritable;
    path?: never;
    query?: never;
    url: '/customized_helpdesktickets/';
};

export type CustomizedHelpdeskticketsCreateResponses = {
    201: CustomTicket;
};

export type CustomizedHelpdeskticketsCreateResponse = CustomizedHelpdeskticketsCreateResponses[keyof CustomizedHelpdeskticketsCreateResponses];

export type CustomizedHelpdeskticketsAssignmentStatsListData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/customized_helpdesktickets/assignment-stats/';
};

export type CustomizedHelpdeskticketsAssignmentStatsListErrors = {
    /**
     * Unauthorized – authentication credentials were not provided or invalid.
     */
    401: unknown;
    /**
     * Internal Server Error – unexpected issue occurred.
     */
    500: unknown;
};

export type CustomizedHelpdeskticketsAssignmentStatsListResponses = {
    /**
     * Successful response with ticket counts.
     */
    200: unknown;
};

export type CustomizedHelpdeskticketsDeleteData = {
    body?: never;
    path: {
        /**
         * A unique integer value identifying this Ticket.
         */
        id: number;
    };
    query?: never;
    url: '/customized_helpdesktickets/{id}/';
};

export type CustomizedHelpdeskticketsDeleteResponses = {
    204: unknown;
};

export type CustomizedHelpdeskticketsReadData = {
    body?: never;
    path: {
        /**
         * A unique integer value identifying this Ticket.
         */
        id: number;
    };
    query?: never;
    url: '/customized_helpdesktickets/{id}/';
};

export type CustomizedHelpdeskticketsReadResponses = {
    200: CustomTicket;
};

export type CustomizedHelpdeskticketsReadResponse = CustomizedHelpdeskticketsReadResponses[keyof CustomizedHelpdeskticketsReadResponses];

export type CustomizedHelpdeskticketsPartialUpdateData = {
    body: CustomTicketWritable;
    path: {
        /**
         * A unique integer value identifying this Ticket.
         */
        id: number;
    };
    query?: never;
    url: '/customized_helpdesktickets/{id}/';
};

export type CustomizedHelpdeskticketsPartialUpdateResponses = {
    200: CustomTicket;
};

export type CustomizedHelpdeskticketsPartialUpdateResponse = CustomizedHelpdeskticketsPartialUpdateResponses[keyof CustomizedHelpdeskticketsPartialUpdateResponses];

export type CustomizedHelpdeskticketsUpdateData = {
    body: CustomTicketWritable;
    path: {
        /**
         * A unique integer value identifying this Ticket.
         */
        id: number;
    };
    query?: never;
    url: '/customized_helpdesktickets/{id}/';
};

export type CustomizedHelpdeskticketsUpdateResponses = {
    200: CustomTicket;
};

export type CustomizedHelpdeskticketsUpdateResponse = CustomizedHelpdeskticketsUpdateResponses[keyof CustomizedHelpdeskticketsUpdateResponses];

export type GroupsListData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/groups/';
};

export type GroupsListResponses = {
    200: Array<Group>;
};

export type GroupsListResponse = GroupsListResponses[keyof GroupsListResponses];

export type GroupsCreateData = {
    body: GroupWritable;
    path?: never;
    query?: never;
    url: '/groups/';
};

export type GroupsCreateResponses = {
    201: Group;
};

export type GroupsCreateResponse = GroupsCreateResponses[keyof GroupsCreateResponses];

export type GroupsDeleteData = {
    body?: never;
    path: {
        /**
         * A unique integer value identifying this group.
         */
        id: number;
    };
    query?: never;
    url: '/groups/{id}/';
};

export type GroupsDeleteResponses = {
    /**
     * Group deleted successfully
     */
    204: unknown;
};

export type GroupsReadData = {
    body?: never;
    path: {
        /**
         * A unique integer value identifying this group.
         */
        id: number;
    };
    query?: never;
    url: '/groups/{id}/';
};

export type GroupsReadResponses = {
    200: GroupDetail;
};

export type GroupsReadResponse = GroupsReadResponses[keyof GroupsReadResponses];

export type GroupsPartialUpdateData = {
    body: GroupWritable;
    path: {
        /**
         * A unique integer value identifying this group.
         */
        id: number;
    };
    query?: never;
    url: '/groups/{id}/';
};

export type GroupsPartialUpdateResponses = {
    200: Group;
};

export type GroupsPartialUpdateResponse = GroupsPartialUpdateResponses[keyof GroupsPartialUpdateResponses];

export type GroupsUpdateData = {
    body: GroupWritable;
    path: {
        /**
         * A unique integer value identifying this group.
         */
        id: number;
    };
    query?: never;
    url: '/groups/{id}/';
};

export type GroupsUpdateResponses = {
    200: Group;
};

export type GroupsUpdateResponse = GroupsUpdateResponses[keyof GroupsUpdateResponses];

export type GroupsAddUserCreateData = {
    body: {
        /**
         * ID of the user to add
         */
        user_id: number;
    };
    path: {
        id: string;
        /**
         * Group ID
         */
        pk: number;
    };
    query?: never;
    url: '/groups/{id}/add_user/';
};

export type GroupsAddUserCreateResponses = {
    /**
     * User added to group successfully
     */
    200: unknown;
};

export type GroupsRemoveUserCreateData = {
    body: {
        /**
         * ID of the user to remove
         */
        user_id: number;
    };
    path: {
        /**
         * Group ID
         */
        id: number;
    };
    query?: never;
    url: '/groups/{id}/remove_user/';
};

export type GroupsRemoveUserCreateResponses = {
    /**
     * User removed from group successfully
     */
    200: unknown;
};

export type HelpdeskApiFollowupsAttachmentsListData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * A page number within the paginated result set.
         */
        page?: number;
        /**
         * Number of results to return per page.
         */
        page_size?: number;
    };
    url: '/helpdesk/api/followups-attachments/';
};

export type HelpdeskApiFollowupsAttachmentsListResponses = {
    200: {
        count: number;
        next?: string | null;
        previous?: string | null;
        results: Array<FollowUpAttachment>;
    };
};

export type HelpdeskApiFollowupsAttachmentsListResponse = HelpdeskApiFollowupsAttachmentsListResponses[keyof HelpdeskApiFollowupsAttachmentsListResponses];

export type HelpdeskApiFollowupsAttachmentsCreateData = {
    body: FollowUpAttachmentWritable;
    path?: never;
    query?: never;
    url: '/helpdesk/api/followups-attachments/';
};

export type HelpdeskApiFollowupsAttachmentsCreateResponses = {
    201: FollowUpAttachment;
};

export type HelpdeskApiFollowupsAttachmentsCreateResponse = HelpdeskApiFollowupsAttachmentsCreateResponses[keyof HelpdeskApiFollowupsAttachmentsCreateResponses];

export type HelpdeskApiFollowupsAttachmentsDeleteData = {
    body?: never;
    path: {
        /**
         * A unique integer value identifying this Attachment.
         */
        id: number;
    };
    query?: never;
    url: '/helpdesk/api/followups-attachments/{id}/';
};

export type HelpdeskApiFollowupsAttachmentsDeleteResponses = {
    204: unknown;
};

export type HelpdeskApiFollowupsAttachmentsReadData = {
    body?: never;
    path: {
        /**
         * A unique integer value identifying this Attachment.
         */
        id: number;
    };
    query?: never;
    url: '/helpdesk/api/followups-attachments/{id}/';
};

export type HelpdeskApiFollowupsAttachmentsReadResponses = {
    200: FollowUpAttachment;
};

export type HelpdeskApiFollowupsAttachmentsReadResponse = HelpdeskApiFollowupsAttachmentsReadResponses[keyof HelpdeskApiFollowupsAttachmentsReadResponses];

export type HelpdeskApiFollowupsAttachmentsPartialUpdateData = {
    body: FollowUpAttachmentWritable;
    path: {
        /**
         * A unique integer value identifying this Attachment.
         */
        id: number;
    };
    query?: never;
    url: '/helpdesk/api/followups-attachments/{id}/';
};

export type HelpdeskApiFollowupsAttachmentsPartialUpdateResponses = {
    200: FollowUpAttachment;
};

export type HelpdeskApiFollowupsAttachmentsPartialUpdateResponse = HelpdeskApiFollowupsAttachmentsPartialUpdateResponses[keyof HelpdeskApiFollowupsAttachmentsPartialUpdateResponses];

export type HelpdeskApiFollowupsAttachmentsUpdateData = {
    body: FollowUpAttachmentWritable;
    path: {
        /**
         * A unique integer value identifying this Attachment.
         */
        id: number;
    };
    query?: never;
    url: '/helpdesk/api/followups-attachments/{id}/';
};

export type HelpdeskApiFollowupsAttachmentsUpdateResponses = {
    200: FollowUpAttachment;
};

export type HelpdeskApiFollowupsAttachmentsUpdateResponse = HelpdeskApiFollowupsAttachmentsUpdateResponses[keyof HelpdeskApiFollowupsAttachmentsUpdateResponses];

export type HelpdeskApiFollowupsListData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * A page number within the paginated result set.
         */
        page?: number;
        /**
         * Number of results to return per page.
         */
        page_size?: number;
    };
    url: '/helpdesk/api/followups/';
};

export type HelpdeskApiFollowupsListResponses = {
    200: {
        count: number;
        next?: string | null;
        previous?: string | null;
        results: Array<FollowUp>;
    };
};

export type HelpdeskApiFollowupsListResponse = HelpdeskApiFollowupsListResponses[keyof HelpdeskApiFollowupsListResponses];

export type HelpdeskApiFollowupsCreateData = {
    body: FollowUpWritable;
    path?: never;
    query?: never;
    url: '/helpdesk/api/followups/';
};

export type HelpdeskApiFollowupsCreateResponses = {
    201: FollowUp;
};

export type HelpdeskApiFollowupsCreateResponse = HelpdeskApiFollowupsCreateResponses[keyof HelpdeskApiFollowupsCreateResponses];

export type HelpdeskApiFollowupsDeleteData = {
    body?: never;
    path: {
        /**
         * A unique integer value identifying this Follow-up.
         */
        id: number;
    };
    query?: never;
    url: '/helpdesk/api/followups/{id}/';
};

export type HelpdeskApiFollowupsDeleteResponses = {
    204: unknown;
};

export type HelpdeskApiFollowupsReadData = {
    body?: never;
    path: {
        /**
         * A unique integer value identifying this Follow-up.
         */
        id: number;
    };
    query?: never;
    url: '/helpdesk/api/followups/{id}/';
};

export type HelpdeskApiFollowupsReadResponses = {
    200: FollowUp;
};

export type HelpdeskApiFollowupsReadResponse = HelpdeskApiFollowupsReadResponses[keyof HelpdeskApiFollowupsReadResponses];

export type HelpdeskApiFollowupsPartialUpdateData = {
    body: FollowUpWritable;
    path: {
        /**
         * A unique integer value identifying this Follow-up.
         */
        id: number;
    };
    query?: never;
    url: '/helpdesk/api/followups/{id}/';
};

export type HelpdeskApiFollowupsPartialUpdateResponses = {
    200: FollowUp;
};

export type HelpdeskApiFollowupsPartialUpdateResponse = HelpdeskApiFollowupsPartialUpdateResponses[keyof HelpdeskApiFollowupsPartialUpdateResponses];

export type HelpdeskApiFollowupsUpdateData = {
    body: FollowUpWritable;
    path: {
        /**
         * A unique integer value identifying this Follow-up.
         */
        id: number;
    };
    query?: never;
    url: '/helpdesk/api/followups/{id}/';
};

export type HelpdeskApiFollowupsUpdateResponses = {
    200: FollowUp;
};

export type HelpdeskApiFollowupsUpdateResponse = HelpdeskApiFollowupsUpdateResponses[keyof HelpdeskApiFollowupsUpdateResponses];

export type HelpdeskApiTicketsListData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * A page number within the paginated result set.
         */
        page?: number;
        /**
         * Number of results to return per page.
         */
        page_size?: number;
    };
    url: '/helpdesk/api/tickets/';
};

export type HelpdeskApiTicketsListResponses = {
    200: {
        count: number;
        next?: string | null;
        previous?: string | null;
        results: Array<Ticket>;
    };
};

export type HelpdeskApiTicketsListResponse = HelpdeskApiTicketsListResponses[keyof HelpdeskApiTicketsListResponses];

export type HelpdeskApiTicketsCreateData = {
    body: TicketWritable;
    path?: never;
    query?: never;
    url: '/helpdesk/api/tickets/';
};

export type HelpdeskApiTicketsCreateResponses = {
    201: Ticket;
};

export type HelpdeskApiTicketsCreateResponse = HelpdeskApiTicketsCreateResponses[keyof HelpdeskApiTicketsCreateResponses];

export type HelpdeskApiTicketsDeleteData = {
    body?: never;
    path: {
        /**
         * A unique integer value identifying this Ticket.
         */
        id: number;
    };
    query?: never;
    url: '/helpdesk/api/tickets/{id}/';
};

export type HelpdeskApiTicketsDeleteResponses = {
    204: unknown;
};

export type HelpdeskApiTicketsReadData = {
    body?: never;
    path: {
        /**
         * A unique integer value identifying this Ticket.
         */
        id: number;
    };
    query?: never;
    url: '/helpdesk/api/tickets/{id}/';
};

export type HelpdeskApiTicketsReadResponses = {
    200: Ticket;
};

export type HelpdeskApiTicketsReadResponse = HelpdeskApiTicketsReadResponses[keyof HelpdeskApiTicketsReadResponses];

export type HelpdeskApiTicketsPartialUpdateData = {
    body: TicketWritable;
    path: {
        /**
         * A unique integer value identifying this Ticket.
         */
        id: number;
    };
    query?: never;
    url: '/helpdesk/api/tickets/{id}/';
};

export type HelpdeskApiTicketsPartialUpdateResponses = {
    200: Ticket;
};

export type HelpdeskApiTicketsPartialUpdateResponse = HelpdeskApiTicketsPartialUpdateResponses[keyof HelpdeskApiTicketsPartialUpdateResponses];

export type HelpdeskApiTicketsUpdateData = {
    body: TicketWritable;
    path: {
        /**
         * A unique integer value identifying this Ticket.
         */
        id: number;
    };
    query?: never;
    url: '/helpdesk/api/tickets/{id}/';
};

export type HelpdeskApiTicketsUpdateResponses = {
    200: Ticket;
};

export type HelpdeskApiTicketsUpdateResponse = HelpdeskApiTicketsUpdateResponses[keyof HelpdeskApiTicketsUpdateResponses];

export type HelpdeskApiUserTicketsListData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * A page number within the paginated result set.
         */
        page?: number;
        /**
         * Number of results to return per page.
         */
        page_size?: number;
    };
    url: '/helpdesk/api/user_tickets/';
};

export type HelpdeskApiUserTicketsListResponses = {
    200: {
        count: number;
        next?: string | null;
        previous?: string | null;
        results: Array<PublicTicketListing>;
    };
};

export type HelpdeskApiUserTicketsListResponse = HelpdeskApiUserTicketsListResponses[keyof HelpdeskApiUserTicketsListResponses];

export type HelpdeskApiUserTicketsReadData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/helpdesk/api/user_tickets/{id}/';
};

export type HelpdeskApiUserTicketsReadResponses = {
    200: PublicTicketListing;
};

export type HelpdeskApiUserTicketsReadResponse = HelpdeskApiUserTicketsReadResponses[keyof HelpdeskApiUserTicketsReadResponses];

export type HelpdeskApiUsersCreateData = {
    body: User;
    path?: never;
    query?: never;
    url: '/helpdesk/api/users/';
};

export type HelpdeskApiUsersCreateResponses = {
    201: User;
};

export type HelpdeskApiUsersCreateResponse = HelpdeskApiUsersCreateResponses[keyof HelpdeskApiUsersCreateResponses];

export type HelpdeskDatatablesTicketListReadData = {
    body?: never;
    path: {
        query: string;
    };
    query?: never;
    url: '/helpdesk/datatables_ticket_list/{query}';
};

export type HelpdeskDatatablesTicketListReadResponses = {
    200: unknown;
};

export type HelpdeskTimelineTicketListReadData = {
    body?: never;
    path: {
        query: string;
    };
    query?: never;
    url: '/helpdesk/timeline_ticket_list/{query}';
};

export type HelpdeskTimelineTicketListReadResponses = {
    200: unknown;
};

export type LoginCreateData = {
    body: {
        username: string;
        password: string;
    };
    path?: never;
    query?: never;
    url: '/login/';
};

export type LoginCreateResponses = {
    /**
     * JWT tokens
     */
    200: unknown;
};

export type QueueGroupLinksListData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/queue-group-links/';
};

export type QueueGroupLinksListResponses = {
    200: Array<QueueGroupLink>;
};

export type QueueGroupLinksListResponse = QueueGroupLinksListResponses[keyof QueueGroupLinksListResponses];

export type QueueGroupLinksCreateData = {
    body: QueueGroupLinkWritable;
    path?: never;
    query?: never;
    url: '/queue-group-links/';
};

export type QueueGroupLinksCreateResponses = {
    201: QueueGroupLink;
};

export type QueueGroupLinksCreateResponse = QueueGroupLinksCreateResponses[keyof QueueGroupLinksCreateResponses];

export type QueueGroupLinksDeleteData = {
    body?: never;
    path: {
        /**
         * The helpdesk queue to be linked.
         */
        queue_id: string;
    };
    query?: never;
    url: '/queue-group-links/{queue_id}/';
};

export type QueueGroupLinksDeleteResponses = {
    /**
     * Deleted successfully
     */
    204: unknown;
};

export type QueueGroupLinksReadData = {
    body?: never;
    path: {
        /**
         * The helpdesk queue to be linked.
         */
        queue_id: string;
    };
    query?: never;
    url: '/queue-group-links/{queue_id}/';
};

export type QueueGroupLinksReadResponses = {
    200: QueueGroupLink;
};

export type QueueGroupLinksReadResponse = QueueGroupLinksReadResponses[keyof QueueGroupLinksReadResponses];

export type QueueGroupLinksPartialUpdateData = {
    body: QueueGroupLinkWritable;
    path: {
        /**
         * The helpdesk queue to be linked.
         */
        queue_id: string;
    };
    query?: never;
    url: '/queue-group-links/{queue_id}/';
};

export type QueueGroupLinksPartialUpdateResponses = {
    200: QueueGroupLink;
};

export type QueueGroupLinksPartialUpdateResponse = QueueGroupLinksPartialUpdateResponses[keyof QueueGroupLinksPartialUpdateResponses];

export type QueueGroupLinksUpdateData = {
    body: QueueGroupLinkWritable;
    path: {
        /**
         * The helpdesk queue to be linked.
         */
        queue_id: string;
    };
    query?: never;
    url: '/queue-group-links/{queue_id}/';
};

export type QueueGroupLinksUpdateResponses = {
    200: QueueGroupLink;
};

export type QueueGroupLinksUpdateResponse = QueueGroupLinksUpdateResponses[keyof QueueGroupLinksUpdateResponses];

export type QueueListData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/queue/';
};

export type QueueListResponses = {
    200: Array<Queue>;
};

export type QueueListResponse = QueueListResponses[keyof QueueListResponses];

export type QueueCreateData = {
    body: QueueWritable;
    path?: never;
    query?: never;
    url: '/queue/';
};

export type QueueCreateResponses = {
    201: Queue;
};

export type QueueCreateResponse = QueueCreateResponses[keyof QueueCreateResponses];

export type QueueDeleteData = {
    body?: never;
    path: {
        queue_id: string;
    };
    query?: never;
    url: '/queue/{queue_id}/';
};

export type QueueDeleteResponses = {
    /**
     * Deleted successfully
     */
    204: unknown;
};

export type QueueReadData = {
    body?: never;
    path: {
        queue_id: string;
    };
    query?: never;
    url: '/queue/{queue_id}/';
};

export type QueueReadResponses = {
    200: Queue;
};

export type QueueReadResponse = QueueReadResponses[keyof QueueReadResponses];

export type QueuePartialUpdateData = {
    body: QueueWritable;
    path: {
        queue_id: string;
    };
    query?: never;
    url: '/queue/{queue_id}/';
};

export type QueuePartialUpdateResponses = {
    200: Queue;
};

export type QueuePartialUpdateResponse = QueuePartialUpdateResponses[keyof QueuePartialUpdateResponses];

export type QueueUpdateData = {
    body: QueueWritable;
    path: {
        queue_id: string;
    };
    query?: never;
    url: '/queue/{queue_id}/';
};

export type QueueUpdateResponses = {
    200: Queue;
};

export type QueueUpdateResponse = QueueUpdateResponses[keyof QueueUpdateResponses];

export type RefreshCreateData = {
    body: {
        refresh: string;
    };
    path?: never;
    query?: never;
    url: '/refresh/';
};

export type RefreshCreateResponses = {
    /**
     * New access token
     */
    200: unknown;
};

export type UserGetListData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/user/get/';
};

export type UserGetListResponses = {
    200: unknown;
};

export type UsersListData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/users/';
};

export type UsersListResponses = {
    200: Array<AppUser>;
};

export type UsersListResponse = UsersListResponses[keyof UsersListResponses];

export type UsersCreateData = {
    body: AppUserWritable;
    path?: never;
    query?: never;
    url: '/users/';
};

export type UsersCreateResponses = {
    201: AppUser;
};

export type UsersCreateResponse = UsersCreateResponses[keyof UsersCreateResponses];

export type UsersDeleteData = {
    body?: never;
    path: {
        /**
         * A unique integer value identifying this user.
         */
        id: number;
    };
    query?: never;
    url: '/users/{id}/';
};

export type UsersDeleteResponses = {
    204: unknown;
};

export type UsersReadData = {
    body?: never;
    path: {
        /**
         * A unique integer value identifying this user.
         */
        id: number;
    };
    query?: never;
    url: '/users/{id}/';
};

export type UsersReadResponses = {
    200: AppUser;
};

export type UsersReadResponse = UsersReadResponses[keyof UsersReadResponses];

export type UsersPartialUpdateData = {
    body: AppUserWritable;
    path: {
        /**
         * A unique integer value identifying this user.
         */
        id: number;
    };
    query?: never;
    url: '/users/{id}/';
};

export type UsersPartialUpdateResponses = {
    200: AppUser;
};

export type UsersPartialUpdateResponse = UsersPartialUpdateResponses[keyof UsersPartialUpdateResponses];

export type UsersUpdateData = {
    body: AppUserWritable;
    path: {
        /**
         * A unique integer value identifying this user.
         */
        id: number;
    };
    query?: never;
    url: '/users/{id}/';
};

export type UsersUpdateResponses = {
    200: AppUser;
};

export type UsersUpdateResponse = UsersUpdateResponses[keyof UsersUpdateResponses];
